const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");
const jimp = require("jimp");

module.exports.config = {
  name: "pair",
  version: "3.1.1",
  hasPermission: 0,
  credits: "Tohidul üñ§, modified by Grok",
  description: "Make a love pair with the command issuer and a random opposite gender member",
  commandCategory: "fun",
  usages: "pair",
  cooldowns: 5,
  usePrefix: true
};

module.exports.run = async function ({ api, event, Users }) {
  try {
    const threadInfo = await api.getThreadInfo(event.threadID);
    const senderID = event.senderID;
    const senderInfo = threadInfo.userInfo.find(u => u.id == senderID);
    
    if (!senderInfo) return api.sendMessage("‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!", event.threadID);

    const senderGender = senderInfo.gender;
    const members = threadInfo.userInfo.filter(u => u.id != api.getCurrentUserID() && u.id != senderID);

    if (members.length < 1) return api.sendMessage("‚ùå ‡¶ï‡¶Æ‡¶™‡¶ï‡ßç‡¶∑‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶™‡¶∞‡ßÄ‡¶§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶•‡¶æ‡¶ï‡¶æ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®!", event.threadID);

    const oppositeGenderMembers = members.filter(m => m.gender !== senderGender && (m.gender === "MALE" || m.gender === "FEMALE"));

    if (oppositeGenderMembers.length === 0)
      return api.sendMessage("‚ùå ‡¶¨‡¶ø‡¶™‡¶∞‡ßÄ‡¶§ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ó‡ßá‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!", event.threadID);

    const partner = oppositeGenderMembers[Math.floor(Math.random() * oppositeGenderMembers.length)];

    const senderName = await Users.getNameUser(senderID);
    const partnerName = await Users.getNameUser(partner.id);

    const senderImg = await getAvatar(senderID);
    const partnerImg = await getAvatar(partner.id);

    const collagePath = await makeCollage(senderImg, partnerImg);

    const msg = 
`‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‡º∫üíò‡ºª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì
     ü•Ç ùë≥ùíêùíóùíÜ ùë∑ùíÇùíäùíì ùë≠ùíêùíìùíéùíÜùíÖ!
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‡º∫üíò‡ºª‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ

${senderGender === "MALE" ? "üë¶üèª ùëØùíÜ" : "üëßüèª ùë∫ùíâùíÜ"}: ${senderName}
${partner.gender === "MALE" ? "üë¶üèª ùëØùíÜ" : "üëßüèª ùë∫ùíâùíÜ"}: ${partnerName}

‚ù§Ô∏è PAIR ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶∏‡¶ø ‡¶¨‡¶æ‡¶ï‡¶ø‡¶ü‡¶æ ‡¶§‡ßã‡¶Æ‡¶∞‡¶æ ‡¶∏‡¶æ‡¶Æ‡¶≤‡¶æ‡¶ì üåö‡•§

‚ú® "ùë™ùíêùíèùíàùíìùíÇùíïùíî ùë™ùíñùíïùíÜ ùë™ùíêùíñùíëùíçùíÜ üíû"

ü´ß ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶æ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶ï ‡¶ö‡¶ø‡¶∞‡¶¶‡¶ø‡¶®`;

    return api.sendMessage({
      body: msg,
      attachment: fs.createReadStream(collagePath),
      mentions: [
        { tag: senderName, id: senderID },
        { tag: partnerName, id: partner.id }
      ]
    }, event.threadID, () => fs.unlinkSync(collagePath));

  } catch (err) {
    console.error(err);
    return api.sendMessage("‚ö†Ô∏è ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã!", event.threadID);
  }
};

// === Helper Functions ===
async function getAvatar(uid) {
  const url = `https://graph.facebook.com/${uid}/picture?height=512&width=512&access_token=350685531728|62f8ce9f74b12f84c123cc23437a4a32`;
  const pathImg = path.join(__dirname, `/cache/${uid}.jpg`);
  const res = await axios.get(url, { responseType: "arraybuffer" });
  fs.writeFileSync(pathImg, Buffer.from(res.data, "utf-8"));
  return pathImg;
}

async function makeCollage(imgPath1, imgPath2) {
  const img1 = await jimp.read(imgPath1);
  const img2 = await jimp.read(imgPath2);

  // Resize for 3x3 inch (300 DPI = 900x900 px)
  img1.resize(900, 900);
  img2.resize(900, 900);

  const width = img1.getWidth() + img2.getWidth();
  const height = Math.max(img1.getHeight(), img2.getHeight());

  const collage = new jimp(width, height);
  collage.composite(img1, 0, 0);
  collage.composite(img2, img1.getWidth(), 0);

  const outPath = path.join(__dirname, `/cache/pair_collage_${Date.now()}.jpg`);
  await collage.writeAsync(outPath);

  fs.unlinkSync(imgPath1);
  fs.unlinkSync(imgPath2);

  return outPath;
}
