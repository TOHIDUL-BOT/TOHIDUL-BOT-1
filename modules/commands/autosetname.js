module.exports.config = {
  name: "autosetname",
  version: "1.0.0",
  hasPermssion: 2,
  usePrefix: true,
  credits: "TOHI-BOT-HUB",
  description: "Set bot nickname in all approved groups - Always enabled by default",
  commandCategory: "BOT ADMIN",
  usages: "[all|status]",
  cooldowns: 10
};

const fs = require('fs-extra');
const path = require('path');

// Set bot nickname with retry mechanism
async function setBotNickname(api, threadID, retries = 3) {
  try {
    const botID = api.getCurrentUserID();
    const botName = global.config.BOTNAME || "TOHI-BOT";
    const prefix = global.config.PREFIX || "/";

    const nickname = `[ ${prefix} ] тАв ${botName}`;

    for (let attempt = 1; attempt <= retries; attempt++) {
      try {
        await api.changeNickname(nickname, threadID, botID);
        return { success: true, nickname };
      } catch (error) {
        if (attempt === retries) {
          throw error;
        }
        // Wait before retry
        await new Promise(resolve => setTimeout(resolve, 2000 * attempt));
      }
    }
  } catch (error) {
    console.error(`Failed to set nickname in group ${threadID}:`, error.message);
    return { success: false, error: error.message };
  }
}

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID, senderID } = event;
  const command = (args[0] || "status").toLowerCase();

  try {
    switch (command) {
      case "all":
        // Set nickname in all approved groups
        const configPath = require('path').join(__dirname, '../../config.json');
        let config;
        try {
          delete require.cache[require.resolve(configPath)];
          config = require(configPath);
        } catch (error) {
          return api.sendMessage("тЭМ ржХржиржлрж┐ржЧ ржлрж╛ржЗрж▓ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!", threadID, messageID);
        }

        if (!config.APPROVAL || !config.APPROVAL.approvedGroups || config.APPROVAL.approvedGroups.length === 0) {
          return api.sendMessage("тЭМ ржХрзЛржирзЛ approved ржЧрзНрж░рзБржк ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!", threadID, messageID);
        }

        api.sendMessage(`ЁЯФД рж╕ржм approved ржЧрзНрж░рзБржкрзЗ ржмржЯ nickname set ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...

ЁЯУК ржорзЛржЯ ржЧрзНрж░рзБржк: ${config.APPROVAL.approvedGroups.length}ржЯрж┐
тП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи...`, threadID);

        let successCount = 0;
        let failedCount = 0;
        const failedGroups = [];

        for (const groupId of config.APPROVAL.approvedGroups) {
          try {
            // Small delay between requests
            await new Promise(resolve => setTimeout(resolve, 1500));

            const result = await setBotNickname(api, groupId);
            if (result.success) {
              successCount++;
              console.log(`тЬЕ Nickname set successfully in group: ${groupId}`);
            } else {
              failedCount++;
              failedGroups.push(groupId);
              console.log(`тЭМ Failed to set nickname in group: ${groupId} - ${result.error}`);
            }
          } catch (error) {
            failedCount++;
            failedGroups.push(groupId);
            console.error(`Error processing group ${groupId}:`, error.message);
          }
        }

        const summaryMessage = `тЬЕ Auto Nickname Set рж╕ржорзНржкржирзНржи!

ЁЯУК рж░рж┐ржкрзЛрж░рзНржЯ:
тЬЕ рж╕ржлрж▓: ${successCount}ржЯрж┐ ржЧрзНрж░рзБржк
тЭМ ржмрзНржпрж░рзНрже: ${failedCount}ржЯрж┐ ржЧрзНрж░рзБржк
ЁЯУЭ ржирж┐ржХржирзЗржо: [ ${global.config.PREFIX} ] тАв ${global.config.BOTNAME}

${failedCount > 0 ? `\nтЪая╕П ржмрзНржпрж░рзНрже ржЧрзНрж░рзБржк IDs:\n${failedGroups.slice(0, 5).join('\n')}${failedGroups.length > 5 ? '\n...(ржЖрж░ржУ ржЖржЫрзЗ)' : ''}` : ''}

ЁЯЪй Made by TOHIDUL`;

        return api.sendMessage(summaryMessage, threadID, messageID);

      case "status":
      default:
        const statusMessage = `ЁЯдЦ Auto Set Name Status

ЁЯУК ржмрж░рзНрждржорж╛ржи ржЕржмрж╕рзНржерж╛: тЬЕ рж╕ржмрж╕ржоржпрж╝ ржЪрж╛рж▓рзБ (Always Enabled)
ЁЯУЭ ржмрж░рзНрждржорж╛ржи ржирж┐ржХржирзЗржо: [ ${global.config.PREFIX} ] тАв ${global.config.BOTNAME}
ЁЯФД ржЕржЯрзЛ рж╕рзЗржЯ: ржирждрзБржи ржЧрзНрж░рзБржкрзЗ add рж╣рж▓рзЗ automatic nickname set рж╣ржпрж╝

ЁЯУЛ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛:
тАв ${global.config.PREFIX}autosetname all - рж╕ржм ржЧрзНрж░рзБржкрзЗ рж╕рзЗржЯ ржХрж░рзБржи
тАв ${global.config.PREFIX}autosetname status - рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрзБржи

тЪб ржмрж┐рж╢рзЗрж╖ рждржерзНржп:
тАв ржмржЯ ржирждрзБржи ржЧрзНрж░рзБржкрзЗ add рж╣рж▓рзЗ auto nickname set рж╣ржмрзЗ
тАв ржХрзЛржирзЛ on/off ржХрж░рж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржирзЗржЗ
тАв рж╕ржмрж╕ржоржпрж╝ active ржерж╛ржХржмрзЗ

ЁЯЪй Made by TOHIDUL`;

        return api.sendMessage(statusMessage, threadID, messageID);
    }
  } catch (error) {
    console.error('AutoSetName command error:', error);
    return api.sendMessage(`тЭМ Error: ${error.message}`, threadID, messageID);
  }
};

// Export the setBotNickname function for use in events
module.exports.setBotNickname = setBotNickname;

// Always return enabled status since it's permanent
module.exports.getAutoSetNameConfig = function() {
  return { enabled: true, permanent: true };
};