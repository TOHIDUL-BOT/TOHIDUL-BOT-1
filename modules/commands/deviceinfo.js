
const os = require('os');
const fs = require('fs-extra');

module.exports.config = {
  name: "deviceinfo",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "TOHI-BOT-HUB",
  description: "Send detailed device information to admin inbox",
  commandCategory: "BOT ADMIN",
  usages: "deviceinfo",
  usePrefix: true,
  cooldowns: 10,
  aliases: ["dvif", "dvinfo"]
};

module.exports.run = async function({ api, event, Users }) {
  const adminId = global.config.ADMINBOT[0]; // ржкрзНрж░ржержо ржПржбржорж┐ржирзЗрж░ ID ржирж┐ржЪрзНржЫрж┐
  
  try {
    // рж╕рж┐рж╕рзНржЯрзЗржо ржЗржиржлрж░ржорзЗрж╢ржи рж╕ржВржЧрзНрж░рж╣
    const systemInfo = {
      // ржЕржкрж╛рж░рзЗржЯрж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо рждржерзНржп
      platform: os.platform(),
      type: os.type(),
      release: os.release(),
      arch: os.arch(),
      
      // CPU рждржерзНржп
      cpus: os.cpus(),
      cpuModel: os.cpus()[0]?.model || 'Unknown',
      cpuCount: os.cpus().length,
      
      // ржорзЗржорзЛрж░рж┐ рждржерзНржп
      totalMemory: Math.round(os.totalmem() / 1024 / 1024 / 1024 * 100) / 100, // GB рждрзЗ
      freeMemory: Math.round(os.freemem() / 1024 / 1024 / 1024 * 100) / 100, // GB рждрзЗ
      usedMemory: Math.round((os.totalmem() - os.freemem()) / 1024 / 1024 / 1024 * 100) / 100, // GB рждрзЗ
      
      // Node.js рждржерзНржп
      nodeVersion: process.version,
      platform_node: process.platform,
      arch_node: process.arch,
      
      // ржкрзНрж░рж╕рзЗрж╕ рждржерзНржп
      pid: process.pid,
      uptime: Math.round(process.uptime()), // рж╕рзЗржХрзЗржирзНржбрзЗ
      
      // ржирзЗржЯржУржпрж╝рж╛рж░рзНржХ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕
      networkInterfaces: os.networkInterfaces(),
      
      // рж╣рзЛрж╕рзНржЯ рждржерзНржп
      hostname: os.hostname(),
      username: os.userInfo().username,
      homedir: os.userInfo().homedir,
      
      // ржЕржирзНржпрж╛ржирзНржп
      loadAverage: os.loadavg(),
      endianness: os.endianness(),
      tmpdir: os.tmpdir()
    };

    // IP ржарж┐ржХрж╛ржирж╛ ржЦрзБржБржЬрзЗ ржмрзЗрж░ ржХрж░рж╛
    let ipAddresses = [];
    Object.keys(systemInfo.networkInterfaces).forEach(interfaceName => {
      systemInfo.networkInterfaces[interfaceName].forEach(iface => {
        if (!iface.internal && iface.family === 'IPv4') {
          ipAddresses.push(`${interfaceName}: ${iface.address}`);
        }
      });
    });

    // ржЖржкржЯрж╛ржЗржо ржлрж░ржорзНржпрж╛ржЯ ржХрж░рж╛
    const uptimeHours = Math.floor(systemInfo.uptime / 3600);
    const uptimeMinutes = Math.floor((systemInfo.uptime % 3600) / 60);
    const uptimeSeconds = systemInfo.uptime % 60;

    // ржмржЯ рждржерзНржп
    const botInfo = {
      name: global.config.BOTNAME,
      version: global.config.version || "1.8.0",
      commandCount: global.client.commands.size,
      eventCount: global.client.events.size,
      totalUsers: global.data?.allUserID?.length || 0,
      totalGroups: global.data?.allThreadID?.length || 0
    };

    // ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржорзЗрж╕рзЗржЬ рждрзИрж░рж┐
    const deviceMessage = `
тХФтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЧ
     ЁЯдЦ BOT DEVICE INFORMATION ЁЯдЦ
тХЪтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХЭ

ЁЯУ▒ BASIC INFO:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв рж╣рзЛрж╕рзНржЯржирзЗржо: ${systemInfo.hostname}
тАв ржЗржЙржЬрж╛рж░ржирзЗржо: ${systemInfo.username}
тАв ржкрзНрж▓рзНржпрж╛ржЯржлрж░рзНржо: ${systemInfo.platform} (${systemInfo.type})
тАв ржЖрж░рзНржХрж┐ржЯрзЗржХржЪрж╛рж░: ${systemInfo.arch}
тАв OS рж░рж┐рж▓рж┐ржЬ: ${systemInfo.release}
тАв Endianness: ${systemInfo.endianness}

ЁЯТ╗ CPU INFORMATION:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв ржоржбрзЗрж▓: ${systemInfo.cpuModel}
тАв ржХрзЛрж░ рж╕ржВржЦрзНржпрж╛: ${systemInfo.cpuCount}
тАв Load Average: [${systemInfo.loadAverage.map(avg => avg.toFixed(2)).join(', ')}]

ЁЯза MEMORY INFORMATION:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв ржорзЛржЯ рж░тАНрзНржпрж╛ржо: ${systemInfo.totalMemory} GB
тАв ржмрзНржпржмрж╣рзГржд рж░тАНрзНржпрж╛ржо: ${systemInfo.usedMemory} GB
тАв ржлрзНрж░рж┐ рж░тАНрзНржпрж╛ржо: ${systemInfo.freeMemory} GB
тАв рж░тАНрзНржпрж╛ржо ржмрзНржпржмрж╣рж╛рж░: ${Math.round((systemInfo.usedMemory / systemInfo.totalMemory) * 100)}%

тЪЩя╕П NODE.JS INFO:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв Node Version: ${systemInfo.nodeVersion}
тАв Process ID: ${systemInfo.pid}
тАв ржЖржкржЯрж╛ржЗржо: ${uptimeHours}h ${uptimeMinutes}m ${uptimeSeconds}s

ЁЯМР NETWORK INTERFACES:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
${ipAddresses.length > 0 ? ipAddresses.join('\n') : 'ржХрзЛржи ржмрж╛рж╣рзНржпрж┐ржХ IP ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐'}

ЁЯУБ DIRECTORY INFO:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв рж╣рзЛржо ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: ${systemInfo.homedir}
тАв Temp ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: ${systemInfo.tmpdir}
тАв ржХрж╛ржЬрзЗрж░ ржбрж┐рж░рзЗржХрзНржЯрж░рж┐: ${process.cwd()}

ЁЯдЦ BOT STATISTICS:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв ржмржЯ ржирж╛ржо: ${botInfo.name}
тАв ржмржЯ ржнрж╛рж░рзНрж╢ржи: ${botInfo.version}
тАв ржорзЛржЯ ржХржорж╛ржирзНржб: ${botInfo.commandCount}
тАв ржорзЛржЯ ржЗржнрзЗржирзНржЯ: ${botInfo.eventCount}
тАв ржорзЛржЯ ржЗржЙржЬрж╛рж░: ${botInfo.totalUsers}
тАв ржорзЛржЯ ржЧрзНрж░рзБржк: ${botInfo.totalGroups}

ЁЯХТ TIMESTAMP:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв рж░рж┐ржкрзЛрж░рзНржЯ рж╕ржоржпрж╝: ${new Date().toLocaleString('bn-BD', {timeZone: 'Asia/Dhaka'})}
тАв GMT+6 (ржврж╛ржХрж╛ рж╕ржоржпрж╝)

ЁЯФз ADDITIONAL INFO:
тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ
тАв Environment: ${process.env.NODE_ENV || 'development'}
тАв Platform: ${process.env.PLATFORM || 'Replit'}
тАв Bot Running On: ${process.env.REPL_SLUG || 'Unknown Server'}

ЁЯЪй Made by TOHI-BOT-HUB
`;

    // ржПржбржорж┐ржирзЗрж░ ржХрж╛ржЫрзЗ ржкрж╛ржарж╛ржирзЛ
    await api.sendMessage(deviceMessage, adminId);
    
    // ржХржорж╛ржирзНржб ржЗржЙржЬрж╛рж░ржХрзЗ ржирж┐рж╢рзНржЪрж┐рждржХрж░ржг
    return api.sendMessage(
      "тЬЕ ржбрж┐ржнрж╛ржЗрж╕ ржЗржиржлрж░ржорзЗрж╢ржи рж╕ржлрж▓ржнрж╛ржмрзЗ ржПржбржорж┐ржирзЗрж░ ржЗржиржмржХрзНрж╕рзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!", 
      event.threadID, 
      event.messageID
    );

  } catch (error) {
    console.error("Device info error:", error);
    
    // рждрзНрж░рзБржЯрж┐рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕рж╛ржзрж╛рж░ржг рждржерзНржп ржкрж╛ржарж╛ржирзЛ
    const basicInfo = `
ЁЯЪи DEVICE INFO ERROR REPORT ЁЯЪи

тЭМ Error: ${error.message}

ЁЯУ▒ Basic Info Available:
тАв Platform: ${os.platform()}
тАв Node Version: ${process.version}
тАв Uptime: ${Math.round(process.uptime())}s
тАв Memory: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB used
тАв PID: ${process.pid}
тАв Time: ${new Date().toLocaleString('bn-BD')}

ЁЯЪй Made by TOHI-BOT-HUB
`;

    try {
      await api.sendMessage(basicInfo, adminId);
      return api.sendMessage(
        "тЪая╕П ржбрж┐ржнрж╛ржЗрж╕ ржЗржиржлрж░ржорзЗрж╢ржи ржЖржВрж╢рж┐ржХржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ (ржХрж┐ржЫрзБ рждрзНрж░рзБржЯрж┐ рж╣ржпрж╝рзЗржЫрзЗ)", 
        event.threadID, 
        event.messageID
      );
    } catch (sendError) {
      return api.sendMessage(
        "тЭМ ржбрж┐ржнрж╛ржЗрж╕ ржЗржиржлрж░ржорзЗрж╢ржи ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ", 
        event.threadID, 
        event.messageID
      );
    }
  }
};
